name: publish
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*' 
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Run tests
      run: dotnet test --configuration Release

  create_nuget:
    runs-on: ubuntu-latest
    needs: [ run_test ]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - run: dotnet build -c Release ./src/Langfuse.Analyzers 
    - run: dotnet build -c Release ./src/Langfuse 
    - run: dotnet pack --no-build --configuration Release --output ${{ env.NuGetDirectory }} ./src/Langfuse/Langfuse.csproj

    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg
        
  deploy:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      - name: Upload nuget artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Update artifacts
          path: |
            **/*.nupkg
            **/*.snupkg
            !.nuget

      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
